#! /usr/bin/env python3
"""
A program to receive data from the Subaru Telescope Gen2 system.

Typical use:

$ datasink -f <configfile>

where <configfile> is the path to a file containing the configuration
for this datasink.
"""
import sys
import os, signal
import tempfile
import subprocess
from argparse import ArgumentParser

from datasink import log
from datasink.datasink import server
from datasink.initialize import read_config
from datasink import __version__

def run_in_background(command):
    """
    Run a command in the background, detaching it from the terminal.

    :param command: List of command arguments to run in the background.
    """
    # Fork the first time
    pid = os.fork()
    if pid > 0:
        # Parent process, return and allow the parent to exit
        return

    # Child process
    # Detach from parent environment
    os.setsid()

    # Fork the second time
    pid = os.fork()
    if pid > 0:
        # First child exits
        os._exit(0)

    # Second child process
    # Redirect standard file descriptors
    sys.stdout.flush()
    sys.stderr.flush()
    with open('/dev/null', 'wb', 0) as f_null:
        os.dup2(f_null.fileno(), 0)  # Redirect stdin
        os.dup2(f_null.fileno(), 1)  # Redirect stdout
        os.dup2(f_null.fileno(), 2)  # Redirect stderr

    # Execute the command
    subprocess.Popen(command)


if __name__ == '__main__':

    argprs = ArgumentParser(description="datasink file transfer program")

    argprs.add_argument("--detach", dest="detach", action="store_true",
                        default=False,
                        help="Detach this process")
    argprs.add_argument("-f", "--config", dest="conffile",
                        help="Specify the configuration file for this sink")
    argprs.add_argument("--kill", dest="kill", action="store_true",
                        default=False,
                        help="Kill the running datasink")
    argprs.add_argument('--version', action='version',
                        version='%(prog)s v{version}'.format(version=__version__),
                        help="Show the datasink version and exit")
    log.addlogopts(argprs)

    (options, args) = argprs.parse_known_args(sys.argv[1:])

    if options.conffile is None:
        argprs.error("Please specify a config file with -f")

    config = read_config(options.conffile)

    if options.detach:
        cmd_args = sys.argv.copy()
        if '--detach' in cmd_args:
            cmd_args.remove("--detach")
            run_in_background(cmd_args)
        sys.exit(0)

    pidfile = config.get('pidfile', os.path.join(tempfile.gettempdir(),
                                                 "datasink.pid"))

    if options.kill:
        try:
            try:
                with open(pidfile, 'r') as pid_f:
                    pid = int(pid_f.read().strip())

                print("Killing %d..." % (pid))
                os.kill(pid, signal.SIGKILL)
                print("Killed.")

            except IOError as e:
                print(f"Cannot read pid file ({pidfile}): {e}")
                sys.exit(1)

            except OSError as e:
                print(f"Error killing pid ({pid}): {e}")
                sys.exit(1)

        finally:
            sys.exit(0)

    server(options, config)
